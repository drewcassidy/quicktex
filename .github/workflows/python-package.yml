# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python Package

on: [ push, pull_request ]

jobs:
  build-sdist:
    name: Build SDist
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          submodules: 'true'

      - name: Set up Python
        uses: actions/setup-python@v3.1.0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
          python -m pip install setuptools twine build

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Build SDist
        run: python -m build --sdist

      - name: Check metadata
        run: python -m twine check dist/*

      - name: Upload SDist
        uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  build-wheels:
    name: Build Wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]

    steps:
      - uses: actions/checkout@v2
        with:
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          submodules: 'true'

      - name: Install libomp
        if: runner.os == 'macOS'
        # openMP isnt part of core apple clang for some reason?
        run: brew install libomp

      - name: Install test images
        run: git clone https://git.pileof.rocks/drewcassidy/quicktex-test-images.git tests/images

      - name: Build wheels
        uses: joerick/cibuildwheel@v1.11.0
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.15"
          CIBW_BUILD: "cp{37,38,39,310}-*"
          CIBW_SKIP: "*-win32 *-manylinux_i686"
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          CIBW_TEST_EXTRAS: "tests"
          CIBW_TEST_COMMAND: nosetests {project}/tests -d

      - name: Upload Wheels
        uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  publish:
    name: Publish to PyPI and Github
    needs: [build-wheels, build-sdist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          # Whether to checkout submodules: `true` to checkout submodules or `recursive` to
          # recursively checkout submodules.
          submodules: 'true'

      - name: Set up Python
        uses: actions/setup-python@v3.1.0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install yaclog

      - name: Get version name and body
        run: |
          echo "VERSION_TILE=Version $(yaclog show -n)" >> $GITHUB_ENV
          echo "$(yaclog show -mb)" >> RELEASE.md

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: List artifacts
        run: ls -l dist

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish to Github
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          name: ${{ env.VERSION_TITLE }}
          body_path: RELEASE.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}